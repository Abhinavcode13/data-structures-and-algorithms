"""Name : Veena
# GitHub username : Veena4512
# Repository name : data-structures-and-algorithms
# Problem :  Given a string s, partition s such that every substring of the partition is a palindrome in Python
# Issue Number : #1374
"""

"""The minimum_partitions function is a dynamic programming solution that calculates the minimum number of partitions 
needed for a given string a, where each partition is a palindrome. It uses two arrays, dp and palindrome, 
to store the intermediate results. The function iterates over each position in the string, checking if the substring 
is a palindrome and updating the minimum cuts accordingly. Finally, it returns the minimum number of partitions 
needed for the entire string. The solution leverages the concept of overlapping problems to efficiently compute 
the minimum partitions using dynamic programming. """


# using DP:
def minimum_partitions(a):
    if len(a) == 0:
        return 0
    dp = [0 for i in range(len(a))]
    palindrome = [[False for i in range(len(a))] for j in range(len(a))]
    for i in range(len(a)):
        cut = i
        for j in range(i + 1):
            if a[i] == a[j] and (i - j < 2 or palindrome[j + 1][i - 1]):
                palindrome[j][i] = True
                cut = min(cut, 0 if j == 0 else (dp[j - 1] + 1))
        dp[i] = cut
    return dp[len(a) - 1]


s = input()
print('Minimum cuts needed for Palindrome Partitioning is', minimum_partitions(s))
